{
  "swagger": "2.0",
  "info": {
    "description": "KubeSphere OpenAPI",
    "title": "KubeSphere",
    "contact": {
      "name": "KubeSphere",
      "url": "https://kubesphere.io/",
      "email": "kubesphere@yunify.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v0.0.0"
  },
  "paths": {
    "/kapis/clustersync.ecpaas.io/v1/backup": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Backup"
        ],
        "summary": "List all backups",
        "operationId": "ListBackup",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.ListBackupResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Backup"
        ],
        "summary": "Create backup",
        "operationId": "CreateBackup",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clustersync.BackupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.BackupNameResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/clustersync.ecpaas.io/v1/backup/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Backup"
        ],
        "summary": "Get backup",
        "operationId": "GetBackup",
        "parameters": [
          {
            "type": "string",
            "description": "backup name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.BackupResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Any parameters which are not provided will not be changed.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Backup"
        ],
        "summary": "Update backup",
        "operationId": "UpdateBackup",
        "parameters": [
          {
            "type": "string",
            "description": "backup name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clustersync.ModifyBackupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Backup"
        ],
        "summary": "Delete backup",
        "operationId": "DeleteBackup",
        "parameters": [
          {
            "type": "string",
            "description": "backup name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/clustersync.ecpaas.io/v1/repository": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Repository"
        ],
        "summary": "List all repositories",
        "operationId": "ListRepository",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.ListRepositoryResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Repository"
        ],
        "summary": "Create repository",
        "operationId": "CreateRepository",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clustersync.RepositoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.RepositoryNameResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/clustersync.ecpaas.io/v1/repository/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Repository"
        ],
        "summary": "Get repository",
        "operationId": "GetRepository",
        "parameters": [
          {
            "type": "string",
            "description": "repository name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.RepositoryResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Any parameters which are not provided will not be changed.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Repository"
        ],
        "summary": "Update Repository",
        "operationId": "UpdateRepository",
        "parameters": [
          {
            "type": "string",
            "description": "repository name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clustersync.ModifyRepositoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Repository"
        ],
        "summary": "Delete repository",
        "operationId": "DeleteRepository",
        "parameters": [
          {
            "type": "string",
            "description": "repository name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/clustersync.ecpaas.io/v1/restore": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Restore"
        ],
        "summary": "List all restores",
        "operationId": "ListRestore",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.ListRestoreResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Restore"
        ],
        "summary": "Create restore",
        "operationId": "CreateRestore",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clustersync.RestoreRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.RestoreNameResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/clustersync.ecpaas.io/v1/restore/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Restore"
        ],
        "summary": "Get restore",
        "operationId": "GetRestore",
        "parameters": [
          {
            "type": "string",
            "description": "restore name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.RestoreResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Any parameters which are not provided will not be changed.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Restore"
        ],
        "summary": "Update restore",
        "operationId": "UpdateRestore",
        "parameters": [
          {
            "type": "string",
            "description": "restore name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clustersync.ModifyRestoreRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Restore"
        ],
        "summary": "Delete restore",
        "operationId": "DeleteRestore",
        "parameters": [
          {
            "type": "string",
            "description": "restore name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/clustersync.ecpaas.io/v1/schedule": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Schedule"
        ],
        "summary": "List all schedules",
        "operationId": "ListSchedule",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.ListScheduleResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Schedule"
        ],
        "summary": "Create schedule",
        "operationId": "CreateSchedule",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clustersync.ScheduleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.ScheduleNameResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/clustersync.ecpaas.io/v1/schedule/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Schedule"
        ],
        "summary": "Get schedule",
        "operationId": "GetSchedule",
        "parameters": [
          {
            "type": "string",
            "description": "schedule name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/clustersync.ScheduleResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Any parameters which are not provided will not be changed.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Schedule"
        ],
        "summary": "Update schedule",
        "operationId": "UpdateSchedule",
        "parameters": [
          {
            "type": "string",
            "description": "schedule name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clustersync.ModifyScheduleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Sync Schedule"
        ],
        "summary": "Delete schedule",
        "operationId": "DeleteSchedule",
        "parameters": [
          {
            "type": "string",
            "description": "schedule name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcnetwork/gatewayChassisNode": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "List available gateway chassis nodes",
        "operationId": "GetGatewayChassisNode",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.ListGatewayChassisNodeResponse"
            }
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcnetwork/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "Get vpcnetwork resources",
        "operationId": "GetVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "vpcnetwork name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetworkResponse"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "Update vpcnetwork",
        "operationId": "UpdateVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "vpcnetwork name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetworkBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetwork"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "Delete vpcnetwork",
        "operationId": "DeleteVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "vpcnetwork name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "Patch vpcnetwork",
        "operationId": "PatchVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "vpcnetwork name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetworkPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetworkPatch"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcnetwork/{workspace}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "Create vpcnetwork",
        "operationId": "CreateVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetwork"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetwork"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcnetworks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "List all vpcnetwork resources",
        "operationId": "ListVpcNetwork",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.ListVPCNetworkResponse"
            }
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcsubnet": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "Create vpcsubnet",
        "operationId": "CreateVpcSubnet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnet"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcsubnet/{namespace}/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "Get vpcsubnet resources",
        "operationId": "GetVpcSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "vpcsubnet name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnetResponse"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "Update vpcsubnet",
        "operationId": "UpdateVpcSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "vpcsubnet name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnetPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnetPutResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "Delete vpcsubnet",
        "operationId": "DeleteVpcSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "vpcsubnet name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "Patch vpcsubnet",
        "operationId": "PatchVpcSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "vpcsubnet name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnetPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnetPatch"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcsubnets": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "List all vpcsubnet resources",
        "operationId": "ListVpcSubnet",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.ListVPCSubnetResponse"
            }
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcsubnets/vpcnetwork/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "List all vpcsubnet resource within vpcnetwork",
        "operationId": "ListVpcSubnetWithinVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "vpcnetwork name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.ListVPCSubnetResponse"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcsubnets/{namespace}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "List all vpcsubnet within the same namespace.",
        "operationId": "ListVpcSubnetWithinNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.ListVPCSubnetResponse"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/kapis/scheduler.ecpaas.io/v1/scheduler": {
      "get": {
        "description": "This API provides multiple schedulerName options that can be specified in the Job resource's schedulerName field under the spec definition. Users can choose from the available schedulers to manage how their job is scheduled in the cluster.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Scheduler"
        ],
        "summary": "List all of scheduler name",
        "operationId": "ListSchedulerName",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.SchedulerNameResponse"
            }
          }
        }
      }
    },
    "/kapis/scheduler.ecpaas.io/v1/yunikorn/queues": {
      "get": {
        "description": "This API provides the available YuniKorn leaf queues, which can be specified in the Job resource's labels, e.g., queue: root.system.high-priority",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Scheduler"
        ],
        "summary": "List YouniKorn's queues",
        "operationId": "ListYuniKornQueues",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.YunikornQueuesResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/disks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "List all disk",
        "operationId": "ListDisk",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListDiskResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/images": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "List all image",
        "operationId": "ListImage",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListImageResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/disks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "List all disk with namespace",
        "operationId": "ListDiskWithNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListDiskResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "Create disk",
        "operationId": "CreateDisk",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.DiskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.DiskIDResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/disks/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "Get disk",
        "operationId": "GetDisk",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "disk id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.DiskResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Any parameters which are not provied will not be changed.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "Update disk",
        "operationId": "UpdateDisk",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "disk id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.ModifyDiskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "Delete disk",
        "operationId": "DeleteDisk",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "disk id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/images": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "List all image with namespace",
        "operationId": "ListImageWithNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListImageResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "Create image",
        "operationId": "CreateImage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.ImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ImageIDResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/images/clone": {
      "post": {
        "description": "Source image's namespace shall be different from new image's namespace.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "Clone image",
        "operationId": "CloneImage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.CloneImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ImageIDResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/images/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "Get image",
        "operationId": "GetImage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "image id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ImageResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Any parameters which are not provied will not be changed.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "Update image",
        "operationId": "UpdateImage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "image id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.ModifyImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "Delete image",
        "operationId": "DeleteImage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "image id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/virtualmachines": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "List all virtual machine with namespace",
        "operationId": "ListVirtualMachineWithNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListVirtualMachineResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Create virtual machine",
        "operationId": "CreateVirtualMahcine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.VirtualMachineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.VirtualMachineIDResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/virtualmachines/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Get virtual machine",
        "operationId": "GetVirtualMachine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "virtual machine id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.VirtualMachineResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Any parameters which are not provied will not be changed. When the cpu cores or memory parameter changed, the virtual machine need be restarted.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Update virtual machine",
        "operationId": "UpdateVirtualMahcine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "virtual machine id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.ModifyVirtualMachineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Delete virtual machine",
        "operationId": "DeleteVirtualMachine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "virtual machine id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/virtualmachines/{id}/start": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Start a virtual machine",
        "operationId": "StartVirtualMahcine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "virtual machine id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/virtualmachines/{id}/stop": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Stop a virtual machine",
        "operationId": "StopVirtualMahcine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "virtual machine id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/virtualization/namespaces/{namespace}/quotas": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources Quotas"
        ],
        "summary": "Get specified namespace's of virtualization resource quota and usage",
        "operationId": "handleVirtualizationGetNamespaceQuotas",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the project",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.VirtualizationResourceQuota"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/virtualmachines": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "List all virtual machine",
        "operationId": "ListVirtualMachine",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListVirtualMachineResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/minio/image": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Upload Minio Image",
        "operationId": "UploadMinioObject",
        "parameters": [
          {
            "type": "file",
            "description": "File Stream form-data",
            "name": "uploadfile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/minio/image/checkFileExist/{imageName}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Check if Minio image exist",
        "operationId": "GetMinioObjectStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Image name",
            "name": "imageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ObjectStatus"
            }
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/minio/image/{imageName}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Delete Minio Image",
        "operationId": "DeleteMinioObject",
        "parameters": [
          {
            "type": "string",
            "description": "Image name",
            "name": "imageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/minio/images": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "List all Minio images",
        "operationId": "ListMinioObjects",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ImagesList"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/namespaces/{namespace}/minio/image": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Upload Minio Image with namespace",
        "operationId": "UploadMinioObjectWithNs",
        "parameters": [
          {
            "type": "file",
            "description": "File Stream form-data",
            "name": "uploadfile",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/namespaces/{namespace}/minio/image/checkFileExist/{imageName}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Check If Minio image exist with namespace",
        "operationId": "GetMinioObjectStatusWithNs",
        "parameters": [
          {
            "type": "string",
            "description": "Image name",
            "name": "imageName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ObjectStatus"
            }
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/namespaces/{namespace}/minio/image/{imageName}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Delete Minio Image with namespace",
        "operationId": "DeleteMinioObjectWithNs",
        "parameters": [
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Image name",
            "name": "imageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/namespaces/{namespace}/minio/images": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "List all Minio images with namespace",
        "operationId": "ListMinioObjectsWithNs",
        "parameters": [
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ImagesList"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "clustersync.BackupNameResponse": {
      "required": [
        "backupName"
      ],
      "properties": {
        "backupName": {
          "description": "Backup name.",
          "type": "string"
        }
      }
    },
    "clustersync.BackupRequest": {
      "required": [
        "backupName",
        "isOneTime"
      ],
      "properties": {
        "backupName": {
          "description": "Backup name. Must be unique. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "backupRepository": {
          "description": "BackupRepository is a string containing the name of a repository where the backup should be stored. Empty string means use the default repository. If no default repository exists, this field is required. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "defaultVolumesToFsBackup": {
          "description": "DefaultVolumesToFsBackup specifies whether pod volume file system backup should be used for all volumes by default.",
          "type": "boolean",
          "default": false
        },
        "excludedNamespaces": {
          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup. If empty, no namespace is excluded. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedNamespaces": {
          "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isOneTime": {
          "description": "Whether this config is for one time backup or cluster sync.",
          "type": "boolean"
        },
        "snapshotMoveData": {
          "description": "SnapshotMoveData specifies whether snapshot data should be moved.",
          "type": "boolean",
          "default": false
        },
        "snapshotRepositories": {
          "description": "SnapshotRepositories is a list containing names of repositories for volume snapshots associated with this backup. Empty array means use the default repository. If no default repository exists, this field is required. Valid array data characters: A-Z, a-z, 0-9, and -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ttl": {
          "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for. Default is 720 hours(30 Days). A time.Duration-parseable string is a signed sequence of decimal numbers with optional fraction and unit suffix.",
          "type": "string",
          "default": "720h",
          "maximum": 32
        }
      }
    },
    "clustersync.BackupResponse": {
      "required": [
        "backupName",
        "includedNamespaces",
        "excludedNamespaces",
        "ttl",
        "backupRepository",
        "defaultVolumesToFsBackup",
        "snapshotRepositories",
        "snapshotMoveData"
      ],
      "properties": {
        "backupName": {
          "description": "Backup name(unique key).",
          "type": "string"
        },
        "backupRepository": {
          "description": "BackupRepository is a string containing the name of a repository where the backup should be stored. Empty string means use the default repository.",
          "type": "string"
        },
        "defaultVolumesToFsBackup": {
          "description": "DefaultVolumesToFsBackup specifies whether pod volume file system backup should be used for all volumes by default.",
          "type": "boolean"
        },
        "excludedNamespaces": {
          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup. If empty, no namespace is excluded.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedNamespaces": {
          "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "snapshotMoveData": {
          "description": "SnapshotMoveData specifies whether snapshot data should be moved.",
          "type": "boolean"
        },
        "snapshotRepositories": {
          "description": "SnapshotRepositories is a list containing names of repositories for volume snapshots associated with this backup. Empty array means use the default repository.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ttl": {
          "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for.",
          "type": "string"
        }
      }
    },
    "clustersync.ListBackupResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of backups. Key is items[].backupName",
          "type": "array",
          "items": {
            "$ref": "#/definitions/clustersync.BackupResponse"
          }
        },
        "total_count": {
          "description": "Total number of backups.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "clustersync.ListRepositoryResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of repositories. Key is items[].repositoryName",
          "type": "array",
          "items": {
            "$ref": "#/definitions/clustersync.RepositoryResponse"
          }
        },
        "total_count": {
          "description": "Total number of repositories.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "clustersync.ListRestoreResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of restores. Key is items[].restoreName",
          "type": "array",
          "items": {
            "$ref": "#/definitions/clustersync.RestoreResponse"
          }
        },
        "total_count": {
          "description": "Total number of restores.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "clustersync.ListScheduleResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of schedules. Key is items[].scheduleName",
          "type": "array",
          "items": {
            "$ref": "#/definitions/clustersync.ScheduleResponse"
          }
        },
        "total_count": {
          "description": "Total number of schedules.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "clustersync.ModifyBackupRequest": {
      "properties": {
        "backupRepository": {
          "description": "BackupRepository is a string containing the name of a repository where the backup should be stored. Empty string means use the default repository. Empty string means clear this field to use the default repository. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "defaultVolumesToFsBackup": {
          "description": "DefaultVolumesToFsBackup specifies whether pod volume file system backup should be used for all volumes by default.",
          "type": "boolean"
        },
        "excludedNamespaces": {
          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup. Empty array means clear this array to exclude no namespace. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedNamespaces": {
          "description": "IncludedNamespaces is a slice of namespace names to include objects from. Empty array means clear this array to include all namespaces. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "snapshotMoveData": {
          "description": "SnapshotMoveData specifies whether snapshot data should be moved.",
          "type": "boolean"
        },
        "snapshotRepositories": {
          "description": "SnapshotRepositories is a list containing names of repositories for volume snapshots associated with this backup. Empty array means clear this array to use the default repository. Valid array data characters: A-Z, a-z, 0-9, and -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ttl": {
          "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for. A time.Duration-parseable string is a signed sequence of decimal numbers with optional fraction and unit suffix. Empty string means clear this field to use the default value(720 hours).",
          "type": "string",
          "maximum": 32
        }
      }
    },
    "clustersync.ModifyRepositoryRequest": {
      "properties": {
        "accessKey": {
          "description": "Repository access key.",
          "type": "string",
          "maximum": 128
        },
        "bucket": {
          "description": "Repository bucket name. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "ip": {
          "description": "Repository IP. Must be valid IPv4/v6 format without mask.",
          "type": "string"
        },
        "isDefault": {
          "description": "Whether to set this repository as default.",
          "type": "boolean"
        },
        "port": {
          "description": "Repository port.",
          "type": "integer",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1
        },
        "prefix": {
          "description": "Repository prefix name. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "provider": {
          "description": "Repository provider name. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "region": {
          "description": "Repository region. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "secretKey": {
          "description": "Repository secret key.",
          "type": "string",
          "maximum": 128
        }
      }
    },
    "clustersync.ModifyRestoreRequest": {
      "properties": {
        "backupSource": {
          "description": "BackupSource is the unique name of the backup source to restore from. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "excludedNamespaces": {
          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup. Empty array means clear this array to exclude no namespace. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedNamespaces": {
          "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included. Empty array means clear this array to include all namespaces. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "clustersync.ModifyScheduleRequest": {
      "properties": {
        "paused": {
          "description": "Paused specifies whether the schedule is paused or not.",
          "type": "boolean"
        },
        "schedule": {
          "description": "Schedule is a Cron expression defining when to run. Valid characters: 0-9, /(slash), *(asterisk), space, and -(hyphen).",
          "type": "string"
        },
        "template": {
          "description": "Template is the definition of the Backup to be run on the provided schedule.",
          "$ref": "#/definitions/clustersync.PutTemplate"
        }
      }
    },
    "clustersync.PostTemplate": {
      "properties": {
        "backupRepository": {
          "description": "BackupRepository is a string containing the name of a repository where the backup should be stored. Empty string means use the default repository. If no default repository exists, this field is required. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "defaultVolumesToFsBackup": {
          "description": "DefaultVolumesToFsBackup specifies whether pod volume file system backup should be used for all volumes by default.",
          "type": "boolean",
          "default": false
        },
        "excludedNamespaces": {
          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup. If empty, no namespace is excluded. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedNamespaces": {
          "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "snapshotMoveData": {
          "description": "SnapshotMoveData specifies whether snapshot data should be moved.",
          "type": "boolean",
          "default": false
        },
        "snapshotRepositories": {
          "description": "SnapshotRepositories is a list containing names of repositories for volume snapshots associated with this backup. Empty array means use the default repository. If no default repository exists, this field is required. Valid array data characters: A-Z, a-z, 0-9, and -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ttl": {
          "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for. Default is 720 hours(30 Days). A time.Duration-parseable string is a signed sequence of decimal numbers with optional fraction and unit suffix.",
          "type": "string",
          "default": "720h",
          "maximum": 32
        }
      }
    },
    "clustersync.PutTemplate": {
      "properties": {
        "backupRepository": {
          "description": "BackupRepository is a string containing the name of a repository where the backup should be stored. Empty string means use the default repository. Empty string means clear this field to use the default repository. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "defaultVolumesToFsBackup": {
          "description": "DefaultVolumesToFsBackup specifies whether pod volume file system backup should be used for all volumes by default.",
          "type": "boolean"
        },
        "excludedNamespaces": {
          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup. Empty array means clear this array to exclude no namespace. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedNamespaces": {
          "description": "IncludedNamespaces is a slice of namespace names to include objects from. Empty array means clear this array to include all namespaces. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "snapshotMoveData": {
          "description": "SnapshotMoveData specifies whether snapshot data should be moved.",
          "type": "boolean"
        },
        "snapshotRepositories": {
          "description": "SnapshotRepositories is a list containing names of repositories for volume snapshots associated with this backup. Empty array means clear this array to use the default repository. Valid array data characters: A-Z, a-z, 0-9, and -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ttl": {
          "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for. A time.Duration-parseable string is a signed sequence of decimal numbers with optional fraction and unit suffix. Empty string means clear this field to use the default value(720 hours).",
          "type": "string",
          "maximum": 32
        }
      }
    },
    "clustersync.RepositoryNameResponse": {
      "required": [
        "repositoryName"
      ],
      "properties": {
        "repositoryName": {
          "description": "Repository name.",
          "type": "string"
        }
      }
    },
    "clustersync.RepositoryRequest": {
      "required": [
        "repositoryName",
        "provider",
        "bucket",
        "prefix",
        "region",
        "ip",
        "port",
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "description": "Repository access key.",
          "type": "string",
          "maximum": 128
        },
        "bucket": {
          "description": "Repository bucket name. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "ip": {
          "description": "Repository IP. Must be valid IPv4/v6 format without mask.",
          "type": "string"
        },
        "isDefault": {
          "description": "Whether to set this repository as default.",
          "type": "boolean",
          "default": false
        },
        "port": {
          "description": "Repository port.",
          "type": "integer",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1
        },
        "prefix": {
          "description": "Repository prefix name. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "provider": {
          "description": "Repository provider name. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "region": {
          "description": "Repository region. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "repositoryName": {
          "description": "Repository name. Must be unique. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "secretKey": {
          "description": "Repository secret key.",
          "type": "string",
          "maximum": 128
        }
      }
    },
    "clustersync.RepositoryResponse": {
      "required": [
        "repositoryName",
        "provider",
        "bucket",
        "prefix",
        "region",
        "ip",
        "port",
        "accessKey",
        "secretKey",
        "isDefault"
      ],
      "properties": {
        "accessKey": {
          "description": "Repository access key. Base64 encoded(not encrypted).",
          "type": "string"
        },
        "bucket": {
          "description": "Repository bucket name.",
          "type": "string"
        },
        "ip": {
          "description": "Repository IP.",
          "type": "string"
        },
        "isDefault": {
          "description": "Whether to set this repository as default.",
          "type": "boolean"
        },
        "port": {
          "description": "Repository port.",
          "type": "integer",
          "format": "int32"
        },
        "prefix": {
          "description": "Repository prefix name.",
          "type": "string"
        },
        "provider": {
          "description": "Repository provider name.",
          "type": "string"
        },
        "region": {
          "description": "Repository region.",
          "type": "string"
        },
        "repositoryName": {
          "description": "Repository name(unique key).",
          "type": "string"
        },
        "secretKey": {
          "description": "Repository secret key. Base64 encoded(not encrypted).",
          "type": "string"
        }
      }
    },
    "clustersync.RestoreNameResponse": {
      "required": [
        "restoreName"
      ],
      "properties": {
        "restoreName": {
          "description": "Restore name.",
          "type": "string"
        }
      }
    },
    "clustersync.RestoreRequest": {
      "required": [
        "restoreName",
        "backupSource",
        "isOneTime"
      ],
      "properties": {
        "backupSource": {
          "description": "BackupSource is the unique name of the backup source to restore from. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "excludedNamespaces": {
          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedNamespaces": {
          "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included. Valid array data characters: a-z, 0-9, -(hyphen). Array data must start and end with alphanumeric character.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isOneTime": {
          "description": "Whether this config is for one time restore or cluster sync.",
          "type": "boolean"
        },
        "restoreName": {
          "description": "Restore name. Must be unique. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        }
      }
    },
    "clustersync.RestoreResponse": {
      "required": [
        "restoreName",
        "backupSource",
        "includedNamespaces",
        "excludedNamespaces"
      ],
      "properties": {
        "backupSource": {
          "description": "BackupSource is the unique name of the backup source to restore from.",
          "type": "string"
        },
        "excludedNamespaces": {
          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup. If empty, no namespace is excluded.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedNamespaces": {
          "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "restoreName": {
          "description": "Restore name(unique key).",
          "type": "string"
        }
      }
    },
    "clustersync.ScheduleNameResponse": {
      "required": [
        "scheduleName"
      ],
      "properties": {
        "scheduleName": {
          "description": "Schedule name.",
          "type": "string"
        }
      }
    },
    "clustersync.ScheduleRequest": {
      "required": [
        "scheduleName",
        "schedule"
      ],
      "properties": {
        "paused": {
          "description": "Paused specifies whether the schedule is paused or not.",
          "type": "boolean",
          "default": false
        },
        "schedule": {
          "description": "Schedule is a Cron expression defining when to run. Valid characters: 0-9, /(slash), *(asterisk), space, and -(hyphen).",
          "type": "string"
        },
        "scheduleName": {
          "description": "Schedule name. Must be unique. Valid characters: A-Z, a-z, 0-9, and -(hyphen). And must start and end with alphanumeric character.",
          "type": "string",
          "maximum": 32
        },
        "template": {
          "description": "Template is the definition of the Backup to be run on the provided schedule.",
          "$ref": "#/definitions/clustersync.PostTemplate"
        }
      }
    },
    "clustersync.ScheduleResponse": {
      "required": [
        "scheduleName",
        "schedule",
        "paused",
        "template"
      ],
      "properties": {
        "paused": {
          "description": "Paused specifies whether the schedule is paused or not.",
          "type": "boolean"
        },
        "schedule": {
          "description": "Schedule is a Cron expression defining when to run.",
          "type": "string"
        },
        "scheduleName": {
          "description": "Schedule name(unique key).",
          "type": "string"
        },
        "template": {
          "description": "Template is the definition of the Backup to be run on the provided schedule.",
          "$ref": "#/definitions/clustersync.TemplateResponse"
        }
      }
    },
    "clustersync.TemplateResponse": {
      "required": [
        "includedNamespaces",
        "excludedNamespaces",
        "ttl",
        "backupRepository",
        "defaultVolumesToFsBackup",
        "snapshotRepositories",
        "snapshotMoveData"
      ],
      "properties": {
        "backupRepository": {
          "description": "BackupRepository is a string containing the name of a repository where the backup should be stored. Empty string means use the default repository.",
          "type": "string"
        },
        "defaultVolumesToFsBackup": {
          "description": "DefaultVolumesToFsBackup specifies whether pod volume file system backup should be used for all volumes by default.",
          "type": "boolean"
        },
        "excludedNamespaces": {
          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup. If empty, no namespace is excluded.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedNamespaces": {
          "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "snapshotMoveData": {
          "description": "SnapshotMoveData specifies whether snapshot data should be moved.",
          "type": "boolean"
        },
        "snapshotRepositories": {
          "description": "SnapshotRepositories is a list containing names of repositories for volume snapshots associated with this backup. Empty array means use the default repository.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ttl": {
          "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for.",
          "type": "string"
        }
      }
    },
    "errors.Error": {
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "util.BadRequestError": {
      "required": [
        "reason"
      ],
      "properties": {
        "reason": {
          "type": "string"
        }
      }
    },
    "v1.ImagesList": {
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ObjectStatusData"
          }
        }
      }
    },
    "v1.ObjectStatus": {
      "required": [
        "fileHas"
      ],
      "properties": {
        "fileHas": {
          "description": "Check file exist or not",
          "type": "boolean"
        }
      }
    },
    "v1.ObjectStatusData": {
      "required": [
        "name",
        "location",
        "lastModified",
        "size"
      ],
      "properties": {
        "lastModified": {
          "description": "The last modified time of the image",
          "type": "string"
        },
        "location": {
          "description": "Image URL location",
          "type": "string"
        },
        "name": {
          "description": "Image file name",
          "type": "string"
        },
        "size": {
          "description": "Size in bytes of the image",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1.SchedulerName": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Available scheduler name",
          "type": "string"
        }
      }
    },
    "v1.SchedulerNameResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "Available schedulers name",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.SchedulerName"
          }
        },
        "total_count": {
          "description": "Total number of scheduler",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.YunikornQueue": {
      "required": [
        "queue"
      ],
      "properties": {
        "queue": {
          "description": "Available yunikorn queue",
          "type": "string"
        }
      }
    },
    "v1.YunikornQueuesResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "Available yunikorn queues",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.YunikornQueue"
          }
        },
        "total_count": {
          "description": "Total number of queues",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "virtualization.CloneImageRequest": {
      "required": [
        "new_img_name",
        "src_img_id",
        "src_img_namespace"
      ],
      "properties": {
        "new_img_name": {
          "description": "New image name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "src_img_id": {
          "description": "Source image id which is got from image api",
          "type": "string"
        },
        "src_img_namespace": {
          "description": "Source Image namespace",
          "type": "string"
        }
      }
    },
    "virtualization.DiskIDResponse": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "disk id",
          "type": "string"
        }
      }
    },
    "virtualization.DiskRequest": {
      "required": [
        "name",
        "description",
        "size"
      ],
      "properties": {
        "description": {
          "description": "Disk description. Default is empty string.",
          "type": "string",
          "maximum": 128
        },
        "name": {
          "description": "Disk name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "size": {
          "description": "Disk size, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 500,
          "minimum": 10
        }
      }
    },
    "virtualization.DiskResponse": {
      "required": [
        "id",
        "name",
        "namespace",
        "description",
        "type",
        "size",
        "mode",
        "minio_image_name",
        "status"
      ],
      "properties": {
        "description": {
          "description": "Disk description",
          "type": "string"
        },
        "id": {
          "description": "Disk id",
          "type": "string"
        },
        "minio_image_name": {
          "description": "File name which created by minio image api",
          "type": "string"
        },
        "mode": {
          "description": "Disk mode, the value is 'rw' or 'ro'",
          "type": "string",
          "default": "rw"
        },
        "name": {
          "description": "Disk name",
          "type": "string"
        },
        "namespace": {
          "description": "Disk namespace",
          "type": "string"
        },
        "size": {
          "description": "Disk size, unit is GB",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 500,
          "minimum": 10
        },
        "status": {
          "description": "Disk status",
          "$ref": "#/definitions/virtualization.DiskStatus"
        },
        "type": {
          "description": "Disk type, the value is 'system' or 'data'",
          "type": "string"
        }
      }
    },
    "virtualization.DiskSpec": {
      "required": [
        "action"
      ],
      "properties": {
        "action": {
          "description": "Disk action, the value is 'add', 'mount' or 'unmount'",
          "type": "string"
        },
        "id": {
          "description": "Disk id which is got from disk api",
          "type": "string"
        },
        "namespace": {
          "description": "Disk namespace",
          "type": "string"
        },
        "size": {
          "description": "Disk size, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 500,
          "minimum": 10
        }
      }
    },
    "virtualization.DiskStatus": {
      "required": [
        "ready",
        "owner"
      ],
      "properties": {
        "owner": {
          "description": "Disk owner, if empty, means not owned by any virtual machine",
          "type": "string"
        },
        "ready": {
          "description": "Disk is ready or not",
          "type": "boolean"
        }
      }
    },
    "virtualization.GuestSpec": {
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "description": "Guest operating system password",
          "type": "string",
          "default": "abc1234"
        },
        "username": {
          "description": "Guest operating system username",
          "type": "string",
          "default": "root"
        }
      }
    },
    "virtualization.ImageIDResponse": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "image id",
          "type": "string"
        }
      }
    },
    "virtualization.ImageInfoResponse": {
      "required": [
        "id",
        "namespace",
        "size"
      ],
      "properties": {
        "id": {
          "description": "Image id which is got from image api",
          "type": "string"
        },
        "namespace": {
          "description": "Image namespace",
          "type": "string"
        },
        "size": {
          "description": "Image size, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 80,
          "minimum": 10
        }
      }
    },
    "virtualization.ImageRequest": {
      "required": [
        "name",
        "os_family",
        "version",
        "cpu_cores",
        "memory",
        "size",
        "description",
        "minio_image_name",
        "shared",
        "type"
      ],
      "properties": {
        "cpu_cores": {
          "description": "Default image cpu cores",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 4,
          "minimum": 1
        },
        "description": {
          "description": "Image description. Default is empty string.",
          "type": "string",
          "maximum": 128
        },
        "memory": {
          "description": "Default image memory, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 8,
          "minimum": 1
        },
        "minio_image_name": {
          "description": "File name which created by minio image api",
          "type": "string"
        },
        "name": {
          "description": "Image name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "os_family": {
          "description": "Image operating system, valid values are 'ubuntu', 'centos', 'debian', 'fedora', 'windows'",
          "type": "string",
          "default": "ubuntu"
        },
        "shared": {
          "description": "Image shared or not",
          "type": "boolean",
          "default": false
        },
        "size": {
          "description": "Default image size, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 80,
          "minimum": 10
        },
        "type": {
          "description": "Image type, the value is 'cloud' or 'iso'",
          "type": "string",
          "default": "cloud"
        },
        "version": {
          "description": "Image version",
          "type": "string",
          "default": "20.04_LTS_64bit"
        }
      }
    },
    "virtualization.ImageResponse": {
      "required": [
        "id",
        "name",
        "namespace",
        "os_family",
        "version",
        "cpu_cores",
        "memory",
        "size",
        "minio_image_name",
        "description",
        "shared",
        "type",
        "status"
      ],
      "properties": {
        "cpu_cores": {
          "description": "Default image cpu cores",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 4,
          "minimum": 1
        },
        "description": {
          "description": "Image description",
          "type": "string"
        },
        "id": {
          "description": "Image id",
          "type": "string"
        },
        "memory": {
          "description": "Default image memory, unit is GB",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 8,
          "minimum": 1
        },
        "minio_image_name": {
          "description": "File name which created by minio image api",
          "type": "string"
        },
        "name": {
          "description": "Image name",
          "type": "string"
        },
        "namespace": {
          "description": "Image namespace",
          "type": "string"
        },
        "os_family": {
          "description": "Image operating system",
          "type": "string",
          "default": "ubuntu"
        },
        "shared": {
          "description": "Image shared or not",
          "type": "boolean",
          "default": false
        },
        "size": {
          "description": "Default image size, unit is GB",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 80,
          "minimum": 10
        },
        "status": {
          "description": "Image status",
          "$ref": "#/definitions/virtualization.ImageStatus"
        },
        "type": {
          "description": "Image type, the value is 'cloud' or 'iso'",
          "type": "string",
          "default": "cloud"
        },
        "version": {
          "description": "Image version",
          "type": "string",
          "default": "20.04_LTS_64bit"
        }
      }
    },
    "virtualization.ImageStatus": {
      "required": [
        "ready",
        "state"
      ],
      "properties": {
        "ready": {
          "description": "Image is ready or not",
          "type": "boolean"
        },
        "state": {
          "description": "Image operation state",
          "type": "string"
        }
      }
    },
    "virtualization.Label": {
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "description": "Label key(unique key). Valid characters: A-Z, a-z, 0-9, -(hyphen), _(underscore), .(dot), and /(slash). Must start and end with a letter or number. The maximum length of each key is 63 characters (if the key contains a domain name, the maximum domain name length is 253 characters plus 1 for seperation(/)).",
          "type": "string",
          "maximum": 317,
          "minimum": 1
        },
        "value": {
          "description": "Label value. Valid characters: A-Z, a-z, 0-9, -(hyphen), _(underscore), and .(dot). Must start and end with an alphanumeric charactor. Can be empty string.",
          "type": "string",
          "maximum": 63
        }
      }
    },
    "virtualization.ListDiskResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of disks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.DiskResponse"
          }
        },
        "total_count": {
          "description": "Total number of disks",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "virtualization.ListImageResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of images",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.ImageResponse"
          }
        },
        "total_count": {
          "description": "Total number of images",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "virtualization.ListVirtualMachineResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of virtual machines",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.VirtualMachineResponse"
          }
        },
        "total_count": {
          "description": "Total number of virtual machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "virtualization.ModifyDiskRequest": {
      "properties": {
        "description": {
          "description": "Disk description. Can be empty string.",
          "type": "string",
          "maximum": 128
        },
        "name": {
          "description": "Disk name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "size": {
          "description": "Disk size, unit is GB and the size only can be increased.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 500,
          "minimum": 10
        }
      }
    },
    "virtualization.ModifyDiskSpec": {
      "required": [
        "action",
        "id"
      ],
      "properties": {
        "action": {
          "description": "Disk action, the value is 'mount' or 'unmount'",
          "type": "string"
        },
        "id": {
          "description": "Disk id which is got from disk api",
          "type": "string"
        },
        "namespace": {
          "description": "Disk namespace",
          "type": "string"
        }
      }
    },
    "virtualization.ModifyImageRequest": {
      "properties": {
        "cpu_cores": {
          "description": "Default image cpu cores",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 4,
          "minimum": 1
        },
        "description": {
          "description": "Image description. Can be empty string.",
          "type": "string",
          "maximum": 128
        },
        "memory": {
          "description": "Default image memory, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 8,
          "minimum": 1
        },
        "name": {
          "description": "Image name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "shared": {
          "description": "Image shared or not",
          "type": "boolean",
          "default": false
        },
        "size": {
          "description": "Default image size, unit is GB and the size only can be increased.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 80,
          "minimum": 10
        }
      }
    },
    "virtualization.ModifyVirtualMachineRequest": {
      "properties": {
        "cpu_cores": {
          "description": "Virtual machine cpu cores.",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 4,
          "minimum": 1
        },
        "description": {
          "description": "Virtual machine description. Can be empty string.",
          "type": "string",
          "maximum": 128
        },
        "disk": {
          "description": "Virtual machine disks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.ModifyDiskSpec"
          }
        },
        "labels": {
          "description": "Virtual machine labels. Can be empty array.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.Label"
          }
        },
        "memory": {
          "description": "Virtual machine memory size, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 8,
          "minimum": 1
        },
        "name": {
          "description": "Virtual machine name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "node_selector": {
          "description": "Virtual machine node selector. Can be empty array.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.NodeSelector"
          }
        }
      }
    },
    "virtualization.NodeSelector": {
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "description": "NodeSelector key(unique key). Valid characters: A-Z, a-z, 0-9, -(hyphen), _(underscore), .(dot), and /(slash). Must start and end with a letter or number. The maximum length of each key is 63 characters (if the key contains a domain name, the maximum domain name length is 253 characters plus 1 for seperation(/)).",
          "type": "string",
          "maximum": 317,
          "minimum": 1
        },
        "value": {
          "description": "NodeSelector value. Valid characters: A-Z, a-z, 0-9, -(hyphen), _(underscore), and .(dot). Must start and end with an alphanumeric charactor. Can be empty string.",
          "type": "string",
          "maximum": 63
        }
      }
    },
    "virtualization.VMStatus": {
      "required": [
        "ready",
        "state"
      ],
      "properties": {
        "ready": {
          "description": "Virtual machine is ready or not",
          "type": "boolean"
        },
        "state": {
          "description": "Virtual machine state",
          "type": "string"
        }
      }
    },
    "virtualization.VirtualMachineIDResponse": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "virtual machine id",
          "type": "string"
        }
      }
    },
    "virtualization.VirtualMachineRequest": {
      "required": [
        "name",
        "cpu_cores",
        "memory",
        "description",
        "image"
      ],
      "properties": {
        "cpu_cores": {
          "description": "Virtual machine cpu cores",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 4,
          "minimum": 1
        },
        "description": {
          "description": "Virtual machine description. Default is empty string.",
          "type": "string",
          "maximum": 128
        },
        "disk": {
          "description": "Virtual machine disks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.DiskSpec"
          }
        },
        "guest": {
          "description": "Virtual machine guest operating system",
          "$ref": "#/definitions/virtualization.GuestSpec"
        },
        "image": {
          "description": "Virtual machine image source",
          "$ref": "#/definitions/virtualization.ImageInfoResponse"
        },
        "labels": {
          "description": "Virtual machine labels",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.Label"
          }
        },
        "memory": {
          "description": "Virtual machine memory size, unit is GB",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 8,
          "minimum": 1
        },
        "name": {
          "description": "Virtual machine name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "node_selector": {
          "description": "Virtual machine node selector",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.NodeSelector"
          }
        }
      }
    },
    "virtualization.VirtualMachineResponse": {
      "required": [
        "id",
        "name",
        "namespace",
        "description",
        "cpu_cores",
        "memory",
        "image",
        "disks",
        "status",
        "node_name",
        "pod_name",
        "labels",
        "node_selector"
      ],
      "properties": {
        "cpu_cores": {
          "description": "Virtual machine cpu cores",
          "type": "integer",
          "format": "integer"
        },
        "description": {
          "description": "Virtual machine description",
          "type": "string"
        },
        "disks": {
          "description": "Virtual machine disks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.DiskResponse"
          }
        },
        "id": {
          "description": "Virtual machine id",
          "type": "string"
        },
        "image": {
          "description": "Virtual machine image source",
          "$ref": "#/definitions/virtualization.ImageInfoResponse"
        },
        "labels": {
          "description": "Virtual machine labels",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.Label"
          }
        },
        "memory": {
          "description": "Virtual machine memory size",
          "type": "integer",
          "format": "integer"
        },
        "name": {
          "description": "Virtual machine name",
          "type": "string"
        },
        "namespace": {
          "description": "Virtual machine namespace",
          "type": "string"
        },
        "node_name": {
          "description": "Virtual machine node",
          "type": "string"
        },
        "node_selector": {
          "description": "Virtual machine node selector",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.NodeSelector"
          }
        },
        "pod_name": {
          "description": "Virtual machine pod",
          "type": "string"
        },
        "status": {
          "description": "Virtual machine status",
          "$ref": "#/definitions/virtualization.VMStatus"
        }
      }
    },
    "virtualization.VirtualizationResourceQuota": {
      "required": [
        "namespace",
        "diskCount",
        "fileCount",
        "imageCount",
        "virtualMachineCount"
      ],
      "properties": {
        "diskCount": {
          "type": "integer",
          "format": "int32"
        },
        "fileCount": {
          "type": "integer",
          "format": "int32"
        },
        "imageCount": {
          "type": "integer",
          "format": "int32"
        },
        "namespace": {
          "description": "Resource Quota namespace",
          "type": "string"
        },
        "virtualMachineCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "vpc.GatewayChassis": {
      "required": [
        "ip"
      ],
      "properties": {
        "ip": {
          "description": "Gateway IP address, e.g., 192.168.41.75 [unique key]",
          "type": "string"
        },
        "node": {
          "description": "Name of the k8s node where the gateway is located",
          "type": "string"
        }
      }
    },
    "vpc.GatewayChassisNode": {
      "required": [
        "node"
      ],
      "properties": {
        "node": {
          "description": "Name of the k8s node where the gateway is located",
          "type": "string"
        }
      }
    },
    "vpc.GatewayChassisResponse": {
      "required": [
        "node",
        "ip"
      ],
      "properties": {
        "ip": {
          "description": "Gateway IP address, e.g., 192.168.41.75 [unique key]",
          "type": "string"
        },
        "node": {
          "description": "Name of the k8s node where the gateway is located",
          "type": "string"
        }
      }
    },
    "vpc.L3Gateway": {
      "required": [
        "network",
        "nexthop"
      ],
      "properties": {
        "destination": {
          "description": "route destination e.g., 0.0.0.0/0",
          "type": "string"
        },
        "network": {
          "description": "L3 gateway address, e.g., 192.168.41.75/22 [unique key]",
          "type": "string"
        },
        "nexthop": {
          "description": "Next hop address e.g., 192.168.40.254",
          "type": "string"
        },
        "vlanid": {
          "description": "VLAN id for external network",
          "type": "integer",
          "format": "int32",
          "maximum": 4094,
          "minimum": 0
        }
      }
    },
    "vpc.L3GatewayResponse": {
      "required": [
        "network",
        "destination",
        "nexthop",
        "vlanid"
      ],
      "properties": {
        "destination": {
          "description": "route destination e.g., 0.0.0.0/0",
          "type": "string"
        },
        "network": {
          "description": "L3 gateway address, e.g., 192.168.41.75/22 [unique key]",
          "type": "string"
        },
        "nexthop": {
          "description": "Next hop address e.g., 192.168.40.254",
          "type": "string"
        },
        "vlanid": {
          "description": "VLAN id for external network",
          "type": "integer",
          "format": "int32",
          "maximum": 4094,
          "minimum": 0
        }
      }
    },
    "vpc.ListGatewayChassisNodeResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of gateway chassis node",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.GatewayChassisNode"
          }
        },
        "total_count": {
          "description": "Total number of gateway chassis node",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "vpc.ListVPCNetworkResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of VPC Network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.VPCNetworkResponse"
          }
        },
        "total_count": {
          "description": "Total number of VPC Network",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "vpc.ListVPCSubnetResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of VPC Subnet",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.VPCSubnetResponse"
          }
        },
        "total_count": {
          "description": "Total number of VPC Subnet",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "vpc.VPCNetwork": {
      "required": [
        "name",
        "cidr"
      ],
      "properties": {
        "cidr": {
          "description": "vpc network private segment address space with cidr format, e.g., 10.0.0.0/16",
          "type": "string"
        },
        "gatewayChassises": {
          "description": "Gateway chassis information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.GatewayChassis"
          }
        },
        "l3gateways": {
          "description": "L3Gateway information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.L3Gateway"
          }
        },
        "name": {
          "description": "must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character. Allowed characters: lowercase letters (a-z), numbers (0-9), and hyphens (-)",
          "type": "string",
          "maximum": 253
        }
      }
    },
    "vpc.VPCNetworkBase": {
      "required": [
        "cidr"
      ],
      "properties": {
        "cidr": {
          "description": "vpc network private segment address space with cidr format, e.g., 10.0.0.0/16",
          "type": "string"
        },
        "gatewayChassises": {
          "description": "Gateway chassis information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.GatewayChassis"
          }
        },
        "l3gateways": {
          "description": "L3Gateway information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.L3Gateway"
          }
        }
      }
    },
    "vpc.VPCNetworkPatch": {
      "properties": {
        "cidr": {
          "description": "vpc network private segment address space with cidr format, e.g., 10.0.0.0/16",
          "type": "string"
        },
        "gatewayChassises": {
          "description": "Gateway chassis information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.GatewayChassis"
          }
        },
        "l3gateways": {
          "description": "L3Gateway information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.L3Gateway"
          }
        }
      }
    },
    "vpc.VPCNetworkResponse": {
      "required": [
        "name",
        "cidr",
        "workspace",
        "gatewayChassises",
        "l3gateways"
      ],
      "properties": {
        "cidr": {
          "description": "vpc network private segment address space with cidr format, e.g., 10.0.0.0/16",
          "type": "string"
        },
        "gatewayChassises": {
          "description": "Gateway chassis information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.GatewayChassisResponse"
          }
        },
        "l3gateways": {
          "description": "L3Gateway information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.L3GatewayResponse"
          }
        },
        "name": {
          "description": "VPC network name [unique key]",
          "type": "string"
        },
        "workspace": {
          "description": "workspace name",
          "type": "string"
        }
      }
    },
    "vpc.VPCSubnet": {
      "required": [
        "name",
        "namespace",
        "cidr"
      ],
      "properties": {
        "cidr": {
          "description": "vpc subnet private segment address space with cidr format, e.g., 10.0.2.0/24",
          "type": "string"
        },
        "name": {
          "description": "must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character. Allowed characters: lowercase letters (a-z), numbers (0-9), and hyphens (-)",
          "type": "string",
          "maximum": 253
        },
        "namespace": {
          "type": "string"
        },
        "vpc": {
          "description": "vpc network name",
          "type": "string"
        }
      }
    },
    "vpc.VPCSubnetPatch": {
      "properties": {
        "cidr": {
          "description": "vpc subnet private segment address space with cidr format, e.g., 10.0.2.0/24",
          "type": "string"
        }
      }
    },
    "vpc.VPCSubnetPut": {
      "properties": {
        "cidr": {
          "description": "vpc subnet private segment address space with cidr format, e.g., 10.0.2.0/24",
          "type": "string"
        }
      }
    },
    "vpc.VPCSubnetPutResponse": {
      "required": [
        "name",
        "namespace"
      ],
      "properties": {
        "cidr": {
          "description": "vpc subnet private segment address space with cidr format, e.g., 10.0.2.0/24",
          "type": "string"
        },
        "name": {
          "description": "must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character. Allowed characters: lowercase letters (a-z), numbers (0-9), and hyphens (-)",
          "type": "string",
          "maximum": 253
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "vpc.VPCSubnetResponse": {
      "required": [
        "name",
        "namespace",
        "cidr",
        "vpc"
      ],
      "properties": {
        "cidr": {
          "description": "vpc subnet private segment address space with cidr format, e.g., 10.0.2.0/24",
          "type": "string"
        },
        "name": {
          "description": "vpc subnet name [unique key]",
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "vpc": {
          "description": "vpc network name",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "jwt": []
    }
  ]
}