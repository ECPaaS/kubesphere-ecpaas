{
  "swagger": "2.0",
  "info": {
    "description": "KubeSphere OpenAPI",
    "title": "KubeSphere",
    "contact": {
      "name": "KubeSphere",
      "url": "https://kubesphere.io/",
      "email": "kubesphere@yunify.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v0.0.0"
  },
  "paths": {
    "/kapis/k8s.ovn.org/v1/vpcnetwork/gatewayChassisNode": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "List available gateway chassis nodes",
        "operationId": "GetGatewayChassisNode",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.ListGatewayChassisNodeResponse"
            }
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcnetwork/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "Get vpcnetwork resources",
        "operationId": "GetVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "vpcnetwork name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetworkResponse"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "Update vpcnetwork",
        "operationId": "UpdateVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "vpcnetwork name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetworkBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetwork"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "Delete vpcnetwork",
        "operationId": "DeleteVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "vpcnetwork name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "Patch vpcnetwork",
        "operationId": "PatchVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "vpcnetwork name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetworkPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetworkPatch"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcnetwork/{workspace}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "Create vpcnetwork",
        "operationId": "CreateVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetwork"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCNetwork"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcnetworks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Network"
        ],
        "summary": "List all vpcnetwork resources",
        "operationId": "ListVpcNetwork",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.ListVPCNetworkResponse"
            }
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcsubnet": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "Create vpcsubnet",
        "operationId": "CreateVpcSubnet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnet"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcsubnet/{namespace}/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "Get vpcsubnet resources",
        "operationId": "GetVpcSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "vpcsubnet name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnetResponse"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "Update vpcsubnet",
        "operationId": "UpdateVpcSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "vpcsubnet name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnetPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnetPutResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "Delete vpcsubnet",
        "operationId": "DeleteVpcSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "vpcsubnet name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "Patch vpcsubnet",
        "operationId": "PatchVpcSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "vpcsubnet name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnetPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.VPCSubnetPatch"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcsubnets": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "List all vpcsubnet resources",
        "operationId": "ListVpcSubnet",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.ListVPCSubnetResponse"
            }
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcsubnets/vpcnetwork/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "List all vpcsubnet resource within vpcnetwork",
        "operationId": "ListVpcSubnetWithinVpcNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "vpcnetwork name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.ListVPCSubnetResponse"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/kapis/k8s.ovn.org/v1/vpcsubnets/{namespace}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "VPC Subnet"
        ],
        "summary": "List all vpcsubnet within the same namespace.",
        "operationId": "ListVpcSubnetWithinNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/vpc.ListVPCSubnetResponse"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/kapis/scheduler.ecpaas.io/v1/scheduler": {
      "get": {
        "description": "This API provides multiple schedulerName options that can be specified in the Job resource's schedulerName field under the spec definition. Users can choose from the available schedulers to manage how their job is scheduled in the cluster.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Scheduler"
        ],
        "summary": "List all of scheduler name",
        "operationId": "ListSchedulerName",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.SchedulerNameResponse"
            }
          }
        }
      }
    },
    "/kapis/scheduler.ecpaas.io/v1/yunikorn/queues": {
      "get": {
        "description": "This API provides the available YuniKorn leaf queues, which can be specified in the Job resource's labels, e.g., queue: root.system.high-priority",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Scheduler"
        ],
        "summary": "List YouniKorn's queues",
        "operationId": "ListYuniKornQueues",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.YunikornQueuesResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha4/metering/price": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Workspace Meters"
        ],
        "summary": "Get resource price.",
        "operationId": "HandlePriceInfoQuery",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/metering.PriceResponse"
            }
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/disks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "List all disk",
        "operationId": "ListDisk",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListDiskResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/images": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "List all image",
        "operationId": "ListImage",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListImageResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/disks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "List all disk with namespace",
        "operationId": "ListDiskWithNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListDiskResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "Create disk",
        "operationId": "CreateDisk",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.DiskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.DiskIDResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/disks/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "Get disk",
        "operationId": "GetDisk",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "disk id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.DiskResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Any parameters which are not provied will not be changed.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "Update disk",
        "operationId": "UpdateDisk",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "disk id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.ModifyDiskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Disk"
        ],
        "summary": "Delete disk",
        "operationId": "DeleteDisk",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "disk id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/images": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "List all image with namespace",
        "operationId": "ListImageWithNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListImageResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "Create image",
        "operationId": "CreateImage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.ImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ImageIDResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/images/clone": {
      "post": {
        "description": "Source image's namespace shall be different from new image's namespace.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "Clone image",
        "operationId": "CloneImage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.CloneImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ImageIDResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/images/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "Get image",
        "operationId": "GetImage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "image id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ImageResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Any parameters which are not provied will not be changed.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "Update image",
        "operationId": "UpdateImage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "image id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.ModifyImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Image"
        ],
        "summary": "Delete image",
        "operationId": "DeleteImage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "image id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/virtualmachines": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "List all virtual machine with namespace",
        "operationId": "ListVirtualMachineWithNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListVirtualMachineResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Create virtual machine",
        "operationId": "CreateVirtualMahcine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.VirtualMachineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.VirtualMachineIDResponse"
            }
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/virtualmachines/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Get virtual machine",
        "operationId": "GetVirtualMachine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "virtual machine id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.VirtualMachineResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Any parameters which are not provied will not be changed. When the cpu cores or memory parameter changed, the virtual machine need be restarted.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Update virtual machine",
        "operationId": "UpdateVirtualMahcine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "virtual machine id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualization.ModifyVirtualMachineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "Invalid format",
            "schema": {
              "$ref": "#/definitions/util.BadRequestError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Delete virtual machine",
        "operationId": "DeleteVirtualMachine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "virtual machine id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/virtualmachines/{id}/start": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Start a virtual machine",
        "operationId": "StartVirtualMahcine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "virtual machine id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/namespaces/{namespace}/virtualmachines/{id}/stop": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "Stop a virtual machine",
        "operationId": "StopVirtualMahcine",
        "parameters": [
          {
            "type": "string",
            "description": "namespace name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "virtual machine id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/virtualization/namespaces/{namespace}/quotas": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources Quotas"
        ],
        "summary": "Get specified namespace's of virtualization resource quota and usage",
        "operationId": "handleVirtualizationGetNamespaceQuotas",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the project",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.VirtualizationResourceQuota"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1/virtualmachines": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Virtualization Virtual Machine"
        ],
        "summary": "List all virtual machine",
        "operationId": "ListVirtualMachine",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/virtualization.ListVirtualMachineResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/minio/image": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Upload Minio Image",
        "operationId": "UploadMinioObject",
        "parameters": [
          {
            "type": "file",
            "description": "File Stream form-data",
            "name": "uploadfile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/minio/image/checkFileExist/{imageName}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Check if Minio image exist",
        "operationId": "GetMinioObjectStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Image name",
            "name": "imageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ObjectStatus"
            }
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/minio/image/{imageName}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Delete Minio Image",
        "operationId": "DeleteMinioObject",
        "parameters": [
          {
            "type": "string",
            "description": "Image name",
            "name": "imageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/minio/images": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "List all Minio images",
        "operationId": "ListMinioObjects",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ImagesList"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/namespaces/{namespace}/minio/image": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Upload Minio Image with namespace",
        "operationId": "UploadMinioObjectWithNs",
        "parameters": [
          {
            "type": "file",
            "description": "File Stream form-data",
            "name": "uploadfile",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/namespaces/{namespace}/minio/image/checkFileExist/{imageName}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Check If Minio image exist with namespace",
        "operationId": "GetMinioObjectStatusWithNs",
        "parameters": [
          {
            "type": "string",
            "description": "Image name",
            "name": "imageName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ObjectStatus"
            }
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/namespaces/{namespace}/minio/image/{imageName}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "Delete Minio Image with namespace",
        "operationId": "DeleteMinioObjectWithNs",
        "parameters": [
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Image name",
            "name": "imageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/kapis/virtualization.ecpaas.io/v1alpha1/namespaces/{namespace}/minio/images": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Minio Images"
        ],
        "summary": "List all Minio images with namespace",
        "operationId": "ListMinioObjectsWithNs",
        "parameters": [
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ImagesList"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "errors.Error": {
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "metering.PriceResponse": {
      "required": [
        "retention_day",
        "gpu_per_percentage_per_hour",
        "gpu_mem_per_percentage_per_hour",
        "mem_per_gigabytes_per_hour",
        "ingress_network_traffic_per_megabytes_per_hour",
        "egress_network_traffic_per_megabytes_per_hour",
        "pvc_per_gigabytes_per_hour",
        "currency",
        "cpu_per_core_per_hour",
        "gpu_fb_per_megabytes_per_hour",
        "gpu_power_per_watt_per_hour"
      ],
      "properties": {
        "cpu_per_core_per_hour": {
          "description": "CPU usage price. If manager define or omitted and shall Multiples of 3",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "currency": {
          "description": "currency code ref https://www.iban.com/currency-codes",
          "type": "string"
        },
        "egress_network_traffic_per_megabytes_per_hour": {
          "description": "Egress traffic count price. If manager define or omitted and shall Multiples of 3",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "gpu_fb_per_megabytes_per_hour": {
          "description": "GPU Framebuffer usage price. If manager define or omitted and shall Multiples of 3",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "gpu_mem_per_percentage_per_hour": {
          "description": "GPU Memory usage price. If manager define or omitted and shall Multiples of 3",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "gpu_per_percentage_per_hour": {
          "description": "GPU usage price. If manager define or omitted and shall Multiples of 3",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "gpu_power_per_watt_per_hour": {
          "description": "GPU Power watt price. If manager define or omitted and shall Multiples of 3",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "ingress_network_traffic_per_megabytes_per_hour": {
          "description": "Ingress traffic count price. If manager define or omitted and shall Multiples of 3",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "mem_per_gigabytes_per_hour": {
          "description": "Memory usage price. If manager define or omitted and shall Multiples of 3",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "pvc_per_gigabytes_per_hour": {
          "description": "PVC usage price. If manager define or omitted and shall Multiples of 3",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "retention_day": {
          "type": "string",
          "default": "7d"
        }
      }
    },
    "v1.ClusterRouterPolicy": {
      "required": [
        "reason"
      ],
      "properties": {
        "reason": {
          "type": "string"
        }
      }
    },
    "v1.ClusterRouterPolicy": {
      "required": [
        "reason"
      ],
      "properties": {
        "reason": {
          "type": "string"
        }
      }
    },
    "v1.ImagesList": {
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ObjectStatusData"
          }
        }
      }
    },
    "v1.ObjectStatus": {
      "required": [
        "fileHas"
      ],
      "properties": {
        "fileHas": {
          "description": "Check file exist or not",
          "type": "boolean"
        }
      }
    },
    "v1.ObjectStatusData": {
      "required": [
        "name",
        "location",
        "lastModified",
        "size"
      ],
      "properties": {
        "lastModified": {
          "description": "The last modified time of the image",
          "type": "string"
        },
        "location": {
          "description": "Image URL location",
          "type": "string"
        },
        "name": {
          "description": "Image file name",
          "type": "string"
        },
        "size": {
          "description": "Size in bytes of the image",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1.Peer": {
      "required": [
        "name",
        "ip",
        "port"
      ],
      "properties": {
        "ip": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.SchedulerNameResponse": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Available scheduler name",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.VPCNetwork": {
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.VPCNetworkSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.VPCNetworkStatus"
        }
      }
    },
    "v1.VPCNetworkSpec": {
      "required": [
        "cidr",
        "subnetLength"
      ],
      "properties": {
        "cidr": {
          "type": "string"
        },
        "clusterRouter": {
          "type": "string"
        },
        "clusterRouterPolicy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ClusterRouterPolicy"
          }
        },
        "gatewayChassises": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.GatewayChassis"
          }
        },
        "l3gateways": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.L3Gateway"
          }
        },
        "nat": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.NATRule"
          }
        },
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Peer"
          }
        },
        "subnetLength": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.VPCNetworkStatus": {
      "required": [
        "subnets"
      ],
      "properties": {
        "subnets": {
          "type": "string"
        },
        "transitSwitch": {
          "type": "string"
        },
        "tsNetwork": {
          "type": "string"
        },
        "tsPort": {
          "type": "string"
        }
      }
    },
    "v1.VPCSubnet": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.VPCSubnetSpec"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.VPCSubnetSpec": {
      "required": [
        "cidr",
        "vpc"
      ],
      "properties": {
        "cidr": {
          "type": "string"
        },
        "vpc": {
          "type": "string"
        }
      }
    },
    "v1.YunikornQueuesResponse": {
      "required": [
        "queues"
      ],
      "properties": {
        "queues": {
          "description": "Available yunikorn queues",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "virtualization.BadRequestError": {
      "required": [
        "reason"
      ],
      "properties": {
        "reason": {
          "type": "string"
        }
      }
    },
    "virtualization.CloneImageRequest": {
      "required": [
        "new_img_name",
        "src_img_id",
        "src_img_namespace"
      ],
      "properties": {
        "new_img_name": {
          "description": "New image name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "src_img_id": {
          "description": "Source image id which is got from image api",
          "type": "string"
        },
        "src_img_namespace": {
          "description": "Source Image namespace",
          "type": "string"
        }
      }
    },
    "virtualization.DiskIDResponse": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "disk id",
          "type": "string"
        }
      }
    },
    "virtualization.DiskRequest": {
      "required": [
        "name",
        "description",
        "size"
      ],
      "properties": {
        "description": {
          "description": "Disk description. Default is empty string.",
          "type": "string",
          "maximum": 128
        },
        "name": {
          "description": "Disk name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "size": {
          "description": "Disk size, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 500,
          "minimum": 10
        }
      }
    },
    "virtualization.DiskResponse": {
      "required": [
        "id",
        "name",
        "namespace",
        "description",
        "type",
        "size",
        "mode",
        "minio_image_name",
        "status"
      ],
      "properties": {
        "description": {
          "description": "Disk description",
          "type": "string"
        },
        "id": {
          "description": "Disk id",
          "type": "string"
        },
        "minio_image_name": {
          "description": "File name which created by minio image api",
          "type": "string"
        },
        "mode": {
          "description": "Disk mode, the value is 'rw' or 'ro'",
          "type": "string",
          "default": "rw"
        },
        "name": {
          "description": "Disk name",
          "type": "string"
        },
        "namespace": {
          "description": "Disk namespace",
          "type": "string"
        },
        "size": {
          "description": "Disk size, unit is GB",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 500,
          "minimum": 10
        },
        "status": {
          "description": "Disk status",
          "$ref": "#/definitions/virtualization.DiskStatus"
        },
        "type": {
          "description": "Disk type, the value is 'system' or 'data'",
          "type": "string"
        }
      }
    },
    "virtualization.DiskSpec": {
      "required": [
        "action"
      ],
      "properties": {
        "action": {
          "description": "Disk action, the value is 'add', 'mount' or 'unmount'",
          "type": "string"
        },
        "id": {
          "description": "Disk id which is got from disk api",
          "type": "string"
        },
        "namespace": {
          "description": "Disk namespace",
          "type": "string"
        },
        "size": {
          "description": "Disk size, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 500,
          "minimum": 10
        }
      }
    },
    "virtualization.DiskStatus": {
      "required": [
        "ready",
        "owner"
      ],
      "properties": {
        "owner": {
          "description": "Disk owner, if empty, means not owned by any virtual machine",
          "type": "string"
        },
        "ready": {
          "description": "Disk is ready or not",
          "type": "boolean"
        }
      }
    },
    "virtualization.GuestSpec": {
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "description": "Guest operating system password",
          "type": "string",
          "default": "abc1234"
        },
        "username": {
          "description": "Guest operating system username",
          "type": "string",
          "default": "root"
        }
      }
    },
    "virtualization.ImageIDResponse": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "image id",
          "type": "string"
        }
      }
    },
    "virtualization.ImageInfoResponse": {
      "required": [
        "id",
        "namespace",
        "size"
      ],
      "properties": {
        "id": {
          "description": "Image id which is got from image api",
          "type": "string"
        },
        "namespace": {
          "description": "Image namespace",
          "type": "string"
        },
        "size": {
          "description": "Image size, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 80,
          "minimum": 10
        }
      }
    },
    "virtualization.ImageRequest": {
      "required": [
        "name",
        "os_family",
        "version",
        "cpu_cores",
        "memory",
        "size",
        "description",
        "minio_image_name",
        "shared",
        "type"
      ],
      "properties": {
        "cpu_cores": {
          "description": "Default image cpu cores",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 4,
          "minimum": 1
        },
        "description": {
          "description": "Image description. Default is empty string.",
          "type": "string",
          "maximum": 128
        },
        "memory": {
          "description": "Default image memory, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 8,
          "minimum": 1
        },
        "minio_image_name": {
          "description": "File name which created by minio image api",
          "type": "string"
        },
        "name": {
          "description": "Image name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "os_family": {
          "description": "Image operating system, valid values are 'ubuntu', 'centos', 'debian', 'fedora', 'windows'",
          "type": "string",
          "default": "ubuntu"
        },
        "shared": {
          "description": "Image shared or not",
          "type": "boolean",
          "default": false
        },
        "size": {
          "description": "Default image size, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 80,
          "minimum": 10
        },
        "type": {
          "description": "Image type, the value is 'cloud' or 'iso'",
          "type": "string",
          "default": "cloud"
        },
        "version": {
          "description": "Image version",
          "type": "string",
          "default": "20.04_LTS_64bit"
        }
      }
    },
    "virtualization.ImageResponse": {
      "required": [
        "id",
        "name",
        "namespace",
        "os_family",
        "version",
        "cpu_cores",
        "memory",
        "size",
        "minio_image_name",
        "description",
        "shared",
        "type",
        "status"
      ],
      "properties": {
        "cpu_cores": {
          "description": "Default image cpu cores",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 4,
          "minimum": 1
        },
        "description": {
          "description": "Image description",
          "type": "string"
        },
        "id": {
          "description": "Image id",
          "type": "string"
        },
        "memory": {
          "description": "Default image memory, unit is GB",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 8,
          "minimum": 1
        },
        "minio_image_name": {
          "description": "File name which created by minio image api",
          "type": "string"
        },
        "name": {
          "description": "Image name",
          "type": "string"
        },
        "namespace": {
          "description": "Image namespace",
          "type": "string"
        },
        "os_family": {
          "description": "Image operating system",
          "type": "string",
          "default": "ubuntu"
        },
        "shared": {
          "description": "Image shared or not",
          "type": "boolean",
          "default": false
        },
        "size": {
          "description": "Default image size, unit is GB",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 80,
          "minimum": 10
        },
        "status": {
          "description": "Image status",
          "$ref": "#/definitions/virtualization.ImageStatus"
        },
        "type": {
          "description": "Image type, the value is 'cloud' or 'iso'",
          "type": "string",
          "default": "cloud"
        },
        "version": {
          "description": "Image version",
          "type": "string",
          "default": "20.04_LTS_64bit"
        }
      }
    },
    "virtualization.ImageStatus": {
      "required": [
        "ready",
        "state"
      ],
      "properties": {
        "ready": {
          "description": "Image is ready or not",
          "type": "boolean"
        },
        "state": {
          "description": "Image operation state",
          "type": "string"
        }
      }
    },
    "virtualization.Label": {
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "description": "Label key(unique key). Valid characters: A-Z, a-z, 0-9, -(hyphen), _(underscore), .(dot), and /(slash).",
          "type": "string",
          "maximum": 316,
          "minimum": 1
        },
        "value": {
          "description": "Label value. Valid characters: A-Z, a-z, 0-9, -(hyphen), _(underscore), and .(dot). Can be empty string.",
          "type": "string",
          "maximum": 63
        }
      }
    },
    "virtualization.ListDiskResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of disks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.DiskResponse"
          }
        },
        "total_count": {
          "description": "Total number of disks",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "virtualization.ListImageResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of images",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.ImageResponse"
          }
        },
        "total_count": {
          "description": "Total number of images",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "virtualization.ListVirtualMachineResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of virtual machines",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.VirtualMachineResponse"
          }
        },
        "total_count": {
          "description": "Total number of virtual machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "virtualization.ModifyDiskRequest": {
      "properties": {
        "description": {
          "description": "Disk description. Can be empty string.",
          "type": "string",
          "maximum": 128
        },
        "name": {
          "description": "Disk name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "size": {
          "description": "Disk size, unit is GB and the size only can be increased.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 500,
          "minimum": 10
        }
      }
    },
    "virtualization.ModifyDiskSpec": {
      "required": [
        "action",
        "id"
      ],
      "properties": {
        "action": {
          "description": "Disk action, the value is 'mount' or 'unmount'",
          "type": "string"
        },
        "id": {
          "description": "Disk id which is got from disk api",
          "type": "string"
        },
        "namespace": {
          "description": "Disk namespace",
          "type": "string"
        }
      }
    },
    "virtualization.ModifyImageRequest": {
      "properties": {
        "cpu_cores": {
          "description": "Default image cpu cores",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 4,
          "minimum": 1
        },
        "description": {
          "description": "Image description. Can be empty string.",
          "type": "string",
          "maximum": 128
        },
        "memory": {
          "description": "Default image memory, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 8,
          "minimum": 1
        },
        "name": {
          "description": "Image name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "shared": {
          "description": "Image shared or not",
          "type": "boolean",
          "default": false
        },
        "size": {
          "description": "Default image size, unit is GB and the size only can be increased.",
          "type": "integer",
          "format": "integer",
          "default": 20,
          "maximum": 80,
          "minimum": 10
        }
      }
    },
    "virtualization.ModifyVirtualMachineRequest": {
      "properties": {
        "cpu_cores": {
          "description": "Virtual machine cpu cores.",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 4,
          "minimum": 1
        },
        "description": {
          "description": "Virtual machine description. Can be empty string.",
          "type": "string",
          "maximum": 128
        },
        "disk": {
          "description": "Virtual machine disks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.ModifyDiskSpec"
          }
        },
        "labels": {
          "description": "Virtual machine labels. Can be empty array.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.Label"
          }
        },
        "memory": {
          "description": "Virtual machine memory size, unit is GB.",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 8,
          "minimum": 1
        },
        "name": {
          "description": "Virtual machine name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "node_selector": {
          "description": "Virtual machine node selector. Can be empty array.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.NodeSelector"
          }
        }
      }
    },
    "virtualization.NodeSelector": {
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "description": "NodeSelector key(unique key). Valid characters: A-Z, a-z, 0-9, -(hyphen), _(underscore), .(dot), and /(slash).",
          "type": "string",
          "maximum": 316,
          "minimum": 1
        },
        "value": {
          "description": "NodeSelector value. Valid characters: A-Z, a-z, 0-9, -(hyphen), _(underscore), and .(dot). Can be empty string.",
          "type": "string",
          "maximum": 63
        }
      }
    },
    "virtualization.VMStatus": {
      "required": [
        "ready",
        "state"
      ],
      "properties": {
        "ready": {
          "description": "Virtual machine is ready or not",
          "type": "boolean"
        },
        "state": {
          "description": "Virtual machine state",
          "type": "string"
        }
      }
    },
    "virtualization.VirtualMachineIDResponse": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "virtual machine id",
          "type": "string"
        }
      }
    },
    "virtualization.VirtualMachineRequest": {
      "required": [
        "name",
        "cpu_cores",
        "memory",
        "description",
        "image"
      ],
      "properties": {
        "cpu_cores": {
          "description": "Virtual machine cpu cores",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 4,
          "minimum": 1
        },
        "description": {
          "description": "Virtual machine description. Default is empty string.",
          "type": "string",
          "maximum": 128
        },
        "disk": {
          "description": "Virtual machine disks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.DiskSpec"
          }
        },
        "guest": {
          "description": "Virtual machine guest operating system",
          "$ref": "#/definitions/virtualization.GuestSpec"
        },
        "image": {
          "description": "Virtual machine image source",
          "$ref": "#/definitions/virtualization.ImageInfoResponse"
        },
        "labels": {
          "description": "Virtual machine labels",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.Label"
          }
        },
        "memory": {
          "description": "Virtual machine memory size, unit is GB",
          "type": "integer",
          "format": "integer",
          "default": 1,
          "maximum": 8,
          "minimum": 1
        },
        "name": {
          "description": "Virtual machine name. Valid characters: A-Z, a-z, 0-9, and -(hyphen).",
          "type": "string",
          "maximum": 16
        },
        "node_selector": {
          "description": "Virtual machine node selector",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.NodeSelector"
          }
        }
      }
    },
    "virtualization.VirtualMachineResponse": {
      "required": [
        "id",
        "name",
        "namespace",
        "description",
        "cpu_cores",
        "memory",
        "image",
        "disks",
        "status",
        "node_name",
        "pod_name",
        "labels",
        "node_selector"
      ],
      "properties": {
        "cpu_cores": {
          "description": "Virtual machine cpu cores",
          "type": "integer",
          "format": "integer"
        },
        "description": {
          "description": "Virtual machine description",
          "type": "string"
        },
        "disks": {
          "description": "Virtual machine disks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.DiskResponse"
          }
        },
        "id": {
          "description": "Virtual machine id",
          "type": "string"
        },
        "image": {
          "description": "Virtual machine image source",
          "$ref": "#/definitions/virtualization.ImageInfoResponse"
        },
        "labels": {
          "description": "Virtual machine labels",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.Label"
          }
        },
        "memory": {
          "description": "Virtual machine memory size",
          "type": "integer",
          "format": "integer"
        },
        "name": {
          "description": "Virtual machine name",
          "type": "string"
        },
        "namespace": {
          "description": "Virtual machine namespace",
          "type": "string"
        },
        "node_name": {
          "description": "Virtual machine node",
          "type": "string"
        },
        "node_selector": {
          "description": "Virtual machine node selector",
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualization.NodeSelector"
          }
        },
        "pod_name": {
          "description": "Virtual machine pod",
          "type": "string"
        },
        "status": {
          "description": "Virtual machine status",
          "$ref": "#/definitions/virtualization.VMStatus"
        }
      }
    },
    "virtualization.VirtualizationResourceQuota": {
      "required": [
        "namespace",
        "diskCount",
        "fileCount",
        "imageCount",
        "virtualMachineCount"
      ],
      "properties": {
        "diskCount": {
          "type": "integer",
          "format": "int32"
        },
        "fileCount": {
          "type": "integer",
          "format": "int32"
        },
        "imageCount": {
          "type": "integer",
          "format": "int32"
        },
        "namespace": {
          "description": "Resource Quota namespace",
          "type": "string"
        },
        "virtualMachineCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "vpc.GatewayChassis": {
      "required": [
        "ip"
      ],
      "properties": {
        "ip": {
          "description": "Gateway IP address, e.g., 192.168.41.75 [unique key]",
          "type": "string"
        },
        "node": {
          "description": "Name of the k8s node where the gateway is located",
          "type": "string"
        }
      }
    },
    "vpc.GatewayChassisNode": {
      "required": [
        "node"
      ],
      "properties": {
        "node": {
          "description": "Name of the k8s node where the gateway is located",
          "type": "string"
        }
      }
    },
    "vpc.GatewayChassisResponse": {
      "required": [
        "node",
        "ip"
      ],
      "properties": {
        "ip": {
          "description": "Gateway IP address, e.g., 192.168.41.75 [unique key]",
          "type": "string"
        },
        "node": {
          "description": "Name of the k8s node where the gateway is located",
          "type": "string"
        }
      }
    },
    "vpc.L3Gateway": {
      "required": [
        "network",
        "nexthop"
      ],
      "properties": {
        "destination": {
          "description": "route destination e.g., 0.0.0.0/0",
          "type": "string"
        },
        "network": {
          "description": "L3 gateway address, e.g., 192.168.41.75/22 [unique key]",
          "type": "string"
        },
        "nexthop": {
          "description": "Next hop address e.g., 192.168.40.254",
          "type": "string"
        },
        "vlanid": {
          "description": "VLAN id for external network",
          "type": "integer",
          "format": "int32",
          "maximum": 4094,
          "minimum": 0
        }
      }
    },
    "vpc.L3GatewayResponse": {
      "required": [
        "network",
        "destination",
        "nexthop",
        "vlanid"
      ],
      "properties": {
        "destination": {
          "description": "route destination e.g., 0.0.0.0/0",
          "type": "string"
        },
        "network": {
          "description": "L3 gateway address, e.g., 192.168.41.75/22 [unique key]",
          "type": "string"
        },
        "nexthop": {
          "description": "Next hop address e.g., 192.168.40.254",
          "type": "string"
        },
        "vlanid": {
          "description": "VLAN id for external network",
          "type": "integer",
          "format": "int32",
          "maximum": 4094,
          "minimum": 0
        }
      }
    },
    "vpc.ListGatewayChassisNodeResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of gateway chassis node",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.GatewayChassisNode"
          }
        },
        "total_count": {
          "description": "Total number of gateway chassis node",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "vpc.ListVPCNetworkResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of VPC Network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.VPCNetworkResponse"
          }
        },
        "total_count": {
          "description": "Total number of VPC Network",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "vpc.ListVPCSubnetResponse": {
      "required": [
        "total_count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "List of VPC Subnet",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.VPCSubnetResponse"
          }
        },
        "total_count": {
          "description": "Total number of VPC Subnet",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "vpc.VPCNetwork": {
      "required": [
        "name",
        "cidr"
      ],
      "properties": {
        "cidr": {
          "description": "vpc network private segment address space with cidr format, e.g., 10.0.0.0/16",
          "type": "string"
        },
        "gatewayChassises": {
          "description": "Gateway chassis information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.GatewayChassis"
          }
        },
        "l3gateways": {
          "description": "L3Gateway information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.L3Gateway"
          }
        },
        "name": {
          "description": "must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character. Allowed characters: lowercase letters (a-z), numbers (0-9), and hyphens (-)",
          "type": "string",
          "maximum": 253
        }
      }
    },
    "vpc.VPCNetworkBase": {
      "required": [
        "cidr"
      ],
      "properties": {
        "cidr": {
          "description": "vpc network private segment address space with cidr format, e.g., 10.0.0.0/16",
          "type": "string"
        },
        "gatewayChassises": {
          "description": "Gateway chassis information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.GatewayChassis"
          }
        },
        "l3gateways": {
          "description": "L3Gateway information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.L3Gateway"
          }
        }
      }
    },
    "vpc.VPCNetworkPatch": {
      "properties": {
        "cidr": {
          "description": "vpc network private segment address space with cidr format, e.g., 10.0.0.0/16",
          "type": "string"
        },
        "gatewayChassises": {
          "description": "Gateway chassis information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.GatewayChassis"
          }
        },
        "l3gateways": {
          "description": "L3Gateway information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.L3Gateway"
          }
        }
      }
    },
    "vpc.VPCNetworkResponse": {
      "required": [
        "name",
        "cidr",
        "workspace",
        "gatewayChassises",
        "l3gateways"
      ],
      "properties": {
        "cidr": {
          "description": "vpc network private segment address space with cidr format, e.g., 10.0.0.0/16",
          "type": "string"
        },
        "gatewayChassises": {
          "description": "Gateway chassis information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.GatewayChassisResponse"
          }
        },
        "l3gateways": {
          "description": "L3Gateway information of vpc network",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpc.L3GatewayResponse"
          }
        },
        "name": {
          "description": "VPC network name [unique key]",
          "type": "string"
        },
        "workspace": {
          "description": "workspace name",
          "type": "string"
        }
      }
    },
    "vpc.VPCSubnet": {
      "required": [
        "name",
        "namespace",
        "cidr"
      ],
      "properties": {
        "cidr": {
          "description": "vpc subnet private segment address space with cidr format, e.g., 10.0.2.0/24",
          "type": "string"
        },
        "name": {
          "description": "must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character. Allowed characters: lowercase letters (a-z), numbers (0-9), and hyphens (-)",
          "type": "string",
          "maximum": 253
        },
        "namespace": {
          "type": "string"
        },
        "vpc": {
          "description": "vpc network name",
          "type": "string"
        }
      }
    },
    "vpc.VPCSubnetPatch": {
      "properties": {
        "cidr": {
          "description": "vpc subnet private segment address space with cidr format, e.g., 10.0.2.0/24",
          "type": "string"
        }
      }
    },
    "vpc.VPCSubnetPut": {
      "properties": {
        "cidr": {
          "description": "vpc subnet private segment address space with cidr format, e.g., 10.0.2.0/24",
          "type": "string"
        }
      }
    },
    "vpc.VPCSubnetPutResponse": {
      "required": [
        "name",
        "namespace"
      ],
      "properties": {
        "cidr": {
          "description": "vpc subnet private segment address space with cidr format, e.g., 10.0.2.0/24",
          "type": "string"
        },
        "name": {
          "description": "must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character. Allowed characters: lowercase letters (a-z), numbers (0-9), and hyphens (-)",
          "type": "string",
          "maximum": 253
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "vpc.VPCSubnetResponse": {
      "required": [
        "name",
        "namespace",
        "cidr",
        "vpc"
      ],
      "properties": {
        "cidr": {
          "description": "vpc subnet private segment address space with cidr format, e.g., 10.0.2.0/24",
          "type": "string"
        },
        "name": {
          "description": "vpc subnet name [unique key]",
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "vpc": {
          "description": "vpc network name",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "jwt": []
    }
  ]
}