/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubesphere.io/api/virtualization/v1alpha1"
)

// ImageTemplateLister helps list ImageTemplates.
// All objects returned here must be treated as read-only.
type ImageTemplateLister interface {
	// List lists all ImageTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageTemplate, err error)
	// ImageTemplates returns an object that can list and get ImageTemplates.
	ImageTemplates(namespace string) ImageTemplateNamespaceLister
	ImageTemplateListerExpansion
}

// imageTemplateLister implements the ImageTemplateLister interface.
type imageTemplateLister struct {
	indexer cache.Indexer
}

// NewImageTemplateLister returns a new ImageTemplateLister.
func NewImageTemplateLister(indexer cache.Indexer) ImageTemplateLister {
	return &imageTemplateLister{indexer: indexer}
}

// List lists all ImageTemplates in the indexer.
func (s *imageTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ImageTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageTemplate))
	})
	return ret, err
}

// ImageTemplates returns an object that can list and get ImageTemplates.
func (s *imageTemplateLister) ImageTemplates(namespace string) ImageTemplateNamespaceLister {
	return imageTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImageTemplateNamespaceLister helps list and get ImageTemplates.
// All objects returned here must be treated as read-only.
type ImageTemplateNamespaceLister interface {
	// List lists all ImageTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageTemplate, err error)
	// Get retrieves the ImageTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ImageTemplate, error)
	ImageTemplateNamespaceListerExpansion
}

// imageTemplateNamespaceLister implements the ImageTemplateNamespaceLister
// interface.
type imageTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImageTemplates in the indexer for a given namespace.
func (s imageTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ImageTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageTemplate))
	})
	return ret, err
}

// Get retrieves the ImageTemplate from the indexer for a given namespace and name.
func (s imageTemplateNamespaceLister) Get(name string) (*v1alpha1.ImageTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imagetemplate"), name)
	}
	return obj.(*v1alpha1.ImageTemplate), nil
}
