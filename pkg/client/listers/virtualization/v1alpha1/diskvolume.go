/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubesphere.io/api/virtualization/v1alpha1"
)

// DiskVolumeLister helps list DiskVolumes.
// All objects returned here must be treated as read-only.
type DiskVolumeLister interface {
	// List lists all DiskVolumes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DiskVolume, err error)
	// DiskVolumes returns an object that can list and get DiskVolumes.
	DiskVolumes(namespace string) DiskVolumeNamespaceLister
	DiskVolumeListerExpansion
}

// diskVolumeLister implements the DiskVolumeLister interface.
type diskVolumeLister struct {
	indexer cache.Indexer
}

// NewDiskVolumeLister returns a new DiskVolumeLister.
func NewDiskVolumeLister(indexer cache.Indexer) DiskVolumeLister {
	return &diskVolumeLister{indexer: indexer}
}

// List lists all DiskVolumes in the indexer.
func (s *diskVolumeLister) List(selector labels.Selector) (ret []*v1alpha1.DiskVolume, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DiskVolume))
	})
	return ret, err
}

// DiskVolumes returns an object that can list and get DiskVolumes.
func (s *diskVolumeLister) DiskVolumes(namespace string) DiskVolumeNamespaceLister {
	return diskVolumeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DiskVolumeNamespaceLister helps list and get DiskVolumes.
// All objects returned here must be treated as read-only.
type DiskVolumeNamespaceLister interface {
	// List lists all DiskVolumes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DiskVolume, err error)
	// Get retrieves the DiskVolume from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DiskVolume, error)
	DiskVolumeNamespaceListerExpansion
}

// diskVolumeNamespaceLister implements the DiskVolumeNamespaceLister
// interface.
type diskVolumeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DiskVolumes in the indexer for a given namespace.
func (s diskVolumeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DiskVolume, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DiskVolume))
	})
	return ret, err
}

// Get retrieves the DiskVolume from the indexer for a given namespace and name.
func (s diskVolumeNamespaceLister) Get(name string) (*v1alpha1.DiskVolume, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("diskvolume"), name)
	}
	return obj.(*v1alpha1.DiskVolume), nil
}
